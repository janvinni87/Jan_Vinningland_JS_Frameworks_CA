{"version":3,"sources":["components/games/index.js","modules/home/index.js","components/contact-form/index.js","modules/contact/index.js","modules/games/index.js","modules/footer/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","card","maxWidth","title","fontSize","media","height","Games","games","classes","map","game","id","slug","name","background_image","released","rating","Grid","key","item","xs","sm","md","Card","className","CardMedia","image","CardContent","Typography","color","gutterBottom","variant","component","Rating","value","readOnly","CardActions","Button","href","flexGrow","Home","data","results","container","spacing","ContactForm","form","marginTop","onSubmit","console","log","validations","email","emailRegex","exact","test","errorMessages","submitState","start","setTimeout","end","Element","label","type","required","Submit","Contact","Game","useParams","useState","setErrors","setData","useEffect","a","fetch","json","then","res","catch","err","fetchData","description","website","width","src","alt","ReactHtmlParser","target","match","useRouteMatch","path","footer","paddingTop","textAlign","Footer","y","Date","getFullYear","footerText","paragraph","root","display","appBar","zIndex","drawer","flexShrink","drawerPaper","content","padding","toolbar","mixins","NoMatch","App","CssBaseline","AppBar","position","Toolbar","noWrap","Drawer","paper","List","ListItem","button","Link","to","ListItemIcon","ListItemText","primary","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ae52e899.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Rating from '@material-ui/lab/Rating';\n\nconst useStyles = makeStyles(theme => ({\n  card: {\n    maxWidth: 345\n  },\n  title: {\n    fontSize: 14,\n  },\n  media: {\n    height: 140\n  }\n}));\n\nconst Games = ({ games }) => {\n  const classes = useStyles();\n\n  const gamesList = games.map(game => {\n    const { id, slug, name, background_image, released, rating } = game;\n\n    return (\n      <Grid key={slug} item xs={12} sm={6} md={3}>\n        <Card className={classes.card}>\n          <CardMedia\n            className={classes.media}\n            image={background_image}\n            title={name}\n          />\n          <CardContent>\n            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n              Released: {released}\n            </Typography>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n              {name}\n            </Typography>\n            <Rating name=\"read-only\" value={rating} readOnly />\n          </CardContent>\n          <CardActions>\n            <Button variant=\"contained\" color=\"primary\" href={`/game/${id}`}>\n              See More\n            </Button>\n          </CardActions>\n        </Card>\n      </Grid>\n    );\n  });\n\n  return gamesList;\n};\n\nexport default Games;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Games from '../../components/games';\n\nconst useStyles = makeStyles(theme => ({\n  games: {\n    flexGrow: 1\n  },\n}));\n\nconst Home = ({data}) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.games}>\n      {data.results && (\n        <>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            Games\n          </Typography>\n          <Grid container spacing={3}>\n            <Games games={data.results} />\n          </Grid>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport Form from 'react-basic-form';\nimport emailRegex from 'email-regex';\nimport 'react-basic-form/dist/style.css';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  form: {\n    maxWidth: 600,\n    marginTop: 60,\n  },\n}));\n\nconst ContactForm = () => {\n\n  return(\n    <Form\n      onSubmit={data => console.log(data)}\n      validations={{\n        email: value => emailRegex({exact: true}).test(value),\n      }}\n      errorMessages={{\n        email: 'Please check your email address.',\n      }}\n      onSubmit={(data, submitState) => {\n        submitState.start();\n        setTimeout(() => {\n          console.log(data);\n          submitState.end();\n        }, 1000);\n      }}\n    >\n      <Form.Element label=\"First Name\" name=\"firstname\" type=\"text\" required />\n      <Form.Element label=\"Last Name\" name=\"lastname\" type=\"text\" required />\n      <Form.Element label=\"Email\" name=\"email\" type=\"email\" required />\n      <Form.Element label=\"Message\" name=\"message\" type=\"textarea\" required />\n      <Form.Submit />\n    </Form>\n  );\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport ContactForm from '../../components/contact-form';\n\nconst Contact = () => {\n  return (\n    <div>\n      <Typography gutterBottom variant=\"h5\" component=\"h2\">\n        Contact\n      </Typography>\n      <ContactForm />\n    </div>\n  );\n};\n\nexport default Contact;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Switch,\n  Route,\n  useRouteMatch,\n  useParams\n} from 'react-router-dom';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport ReactHtmlParser from 'react-html-parser';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    maxWidth: 600,\n  },\n}));\n\nconst Games = () => {\n  const match = useRouteMatch();\n\n  return (\n    <div>\n      <Switch>\n        <Route path={`${match.path}/:id`}>\n          <Game />\n        </Route>\n        <Route path={match.path}>\n          <h3>Please select a game from the home page.</h3>\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n\nconst Game = () => {\n  const classes = useStyles();\n  const { id } = useParams();\n  const [hasError, setErrors] = useState(false); // eslint-disable-line\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    async function fetchData() {\n      const res = await fetch(`https://api.rawg.io/api/games/${id}`);\n      res\n        .json()\n        .then(res => setData(res))\n        .catch(err => setErrors(err));\n    }\n\n    fetchData();\n  });\n\n  const { name, background_image, description, website } = data;\n\n  return (\n    <div>\n      {data &&\n        <div className={classes.container}>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {name}\n          </Typography>\n          <img width=\"100%\" src={background_image} alt={name} />\n          { ReactHtmlParser(description) }\n          <Button variant=\"contained\" color=\"primary\" href={website} target=\"_blank\">\n            Game Website\n          </Button>\n        </div>\n      }\n    </div>\n  );\n};\n\nexport default Games;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport ReactHtmlParser from 'react-html-parser';\n\nconst useStyles = makeStyles(theme => ({\n  footer: {\n    paddingTop: 60,\n    textAlign: 'center',\n  },\n}));\n\nconst Footer = ({data}) => {\n  const classes = useStyles();\n  const d = new Date();\n  const y = d.getFullYear();\n  const footerText = `&copy; ${y} Jan Terje Vinningland`;\n\n  return (\n    <Typography paragraph className={classes.footer}>\n      { ReactHtmlParser(footerText) }\n    </Typography>\n  );\n};\n\nexport default Footer;\n","import React, { useState, useEffect } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from 'react-router-dom';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport HomeIcon from '@material-ui/icons/Home';\nimport MailIcon from '@material-ui/icons/Mail';\n\nimport Home from './modules/home';\nimport Contact from './modules/contact';\nimport Games from './modules/games';\nimport Footer from './modules/footer';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3)\n  },\n  toolbar: theme.mixins.toolbar,\n}));\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Typography gutterBottom variant=\"h5\" component=\"h2\">\n        404 Not found.\n      </Typography>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [hasError, setErrors] = useState(false); // eslint-disable-line\n  const [data, setData] = useState({});\n\n  const classes = useStyles();\n\n  useEffect(() => {\n    async function fetchData() {\n      const res = await fetch(\"https://api.rawg.io/api/games\");\n      res\n        .json()\n        .then(res => setData(res))\n        .catch(err => setErrors(err));\n    }\n\n    fetchData();\n  });\n\n  return (\n    <Router>\n      <div className={classes.root}>\n        <CssBaseline />\n        <AppBar position=\"fixed\" className={classes.appBar}>\n          <Toolbar>\n            <Typography variant=\"h6\" noWrap>\n              JavaScript Frameworks Course Assignment\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          className={classes.drawer}\n          variant=\"permanent\"\n          classes={{\n            paper: classes.drawerPaper\n          }}\n        >\n          <div className={classes.toolbar} />\n          <List>\n            <ListItem button component={Link} to=\"/\">\n              <ListItemIcon>\n                <HomeIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Home\" />\n            </ListItem>\n            <ListItem button component={Link} to=\"/contact\">\n              <ListItemIcon>\n                <MailIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Contact\" />\n            </ListItem>\n          </List>\n        </Drawer>\n        <main className={classes.content}>\n          <div className={classes.toolbar} />\n          <Switch>\n            <Route exact path=\"/\">\n              <Home data={data} />\n            </Route>\n            <Route path=\"/contact\">\n              <Contact />\n            </Route>\n            <Route path=\"/game\">\n              <Games />\n            </Route>\n            <Route component={NoMatch} />\n          </Switch>\n          <Footer />\n        </main>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}